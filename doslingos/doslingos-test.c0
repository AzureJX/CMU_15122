/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2025                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>
#use <parse>

// You are welcome to define helper functions for your tests

int main() {
  // Create a few vocabularies and the corresponding frequences by hand
  string[] vocab = alloc_array(string, 7);
  vocab[0] = "ants";vocab[1] = "burrow";vocab[2] = "cant";vocab[3] = "dos";
  vocab[4] = "effect";vocab[5] = "flywire";vocab[6] = "is";
  int[] freq = alloc_array(int, 7);
  freq[0]=3;freq[1]=2;freq[2]=6;freq[3]=8;
  freq[4]=7;freq[5]=5;freq[6]=4;

  string[] edge_vocab1 = alloc_array(string, 0);
  int[] edge_freq1 = alloc_array(int, 0);

  string[] edge_vocab2 = alloc_array(string, 1);
  edge_vocab2[0] = "wuwu";
  int[] edge_freq2 = alloc_array(int, 1);

  string[] edge_vocab3 = alloc_array(string, 4); // reversely sorted
  edge_vocab3[0] = "DAC";edge_vocab3[1] = "CBA";
  edge_vocab3[2] = "BAD";edge_vocab3[3] = "ABD";
  int[] edge_freq3 = alloc_array(int, 4);
  edge_freq3[0] = 4;edge_freq3[1] = 3;
  edge_freq3[2] = 2;edge_freq3[3] = 1;

  /* Later on, read some vocabularies from file
  and create their frequency arrays*/
  // bundle_t B1 = read_words("texts/news_vocab.txt");
  // string[] news_vocab = string_bundle_array(B1);
  // int news_vocab_len = string_bundle_length(B1);
  // int[] news_vocab_freq = alloc_array(int, news_vocab_len);

  bundle_t B2 = read_words("texts/small_vocab.txt");
  string[] small_vocab = string_bundle_array(B2);
  int small_vocab_len = string_bundle_length(B2);
  assert(small_vocab_len==42);
  int[] small_vocab_freq = alloc_array(int, small_vocab_len);  

  // Using them, write test cases for count_vocab
  assert(count_vocab(vocab,freq,7,"texts/scott_tweet.txt", true)==4);
  assert(freq[1]==3); // "burrow"
  assert(freq[0]==3); // didn't change
  assert(freq[2]==6);
  assert(freq[6]==5);
  assert(string_equal(vocab[0], "ants"));
  assert(string_equal(vocab[2], "cant"));
  assert(string_equal(vocab[4], "effect"));
  assert(string_equal(vocab[6], "is"));

  assert(count_vocab(small_vocab,small_vocab_freq,small_vocab_len,
                     "texts/scott_tweet.txt", true)==4);
  assert(small_vocab_freq[22]==1); // "is"
  assert(small_vocab_freq[26]==1); // "of"
  assert(string_equal(small_vocab[10], "due"));
  assert(string_equal(small_vocab[22], "is"));
  assert(string_equal(small_vocab[26], "of"));
  
  // assert(count_vocab(news_vocab,news_vocab_freq,news_vocab_len,
  //                    "texts/scott_tweet.txt", true)==2);
  // assert(news_vocab_freq[19142]==1); // "his"
  // assert(news_vocab_freq[28914]==1); // "out"

  // Using them, write test cases for sort_by_freq
  string[] vocab2 = alloc_array(string, 10);
  int[] freq2 = alloc_array(int, 10);
  vocab2[0] = "ants";       freq2[0]=7;
  vocab2[1] = "burrow";     freq2[1]=2;
  vocab2[2] = "cant";       freq2[2]=1;
  vocab2[3] = "dos";        freq2[3]=9;
  vocab2[4] = "effect";     freq2[4]=5;
  vocab2[5] = "flywire";    freq2[5]=0;
  vocab2[6] = "is";         freq2[6]=8;
  vocab2[7] = "nanotube";   freq2[7]=4;
  vocab2[8] = "policy";     freq2[8]=6;
  vocab2[9] = "zara";       freq2[9]=3;
  
  sort_by_freq(vocab2, freq2, 10);
  assert(string_equal(vocab2[0],"flywire"));
  assert(string_equal(vocab2[1],"cant"));
  assert(string_equal(vocab2[2],"burrow"));
  assert(string_equal(vocab2[3],"zara"));
  assert(string_equal(vocab2[4],"nanotube"));
  assert(string_equal(vocab2[5],"effect"));
  assert(string_equal(vocab2[6],"policy"));
  assert(string_equal(vocab2[7],"ants"));
  assert(string_equal(vocab2[8],"is"));
  assert(string_equal(vocab2[9],"dos"));
  for (int i = 0; i<10; i++)
  //@loop_invariant 0<=i && i<=10;
  {
    assert(freq2[i]==i);
  }
  
  sort_by_freq(edge_vocab1,edge_freq1,0);
  //@assert \length(edge_vocab1)==0;
  //@assert \length(edge_freq1)==0;
  
  sort_by_freq(edge_vocab2,edge_freq2,1);
  assert(string_equal(edge_vocab2[0],"wuwu"));
  assert(edge_freq2[0] == 0);

  sort_by_freq(edge_vocab3,edge_freq3,4);
  assert(string_equal(edge_vocab3[0], "ABD"));
  assert(string_equal(edge_vocab3[1], "BAD"));
  assert(string_equal(edge_vocab3[2], "CBA"));
  assert(string_equal(edge_vocab3[3], "DAC"));
  assert(edge_freq3[0]==1);
  assert(edge_freq3[1]==2);
  assert(edge_freq3[2]==3);
  assert(edge_freq3[3]==4);

  // DON'T WRITE TESTS FOR binsearch OR no_dupes

  printf("All tests passed!\n");
  return 0;
}
