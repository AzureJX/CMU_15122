/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2025                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>

// You are welcome to define helper functions for your tests

int main() {  
  // sub test
  rope_t R1 = rope_new("t");
  rope_t R2 = rope_new("otally");
  rope_t R3 = rope_new("efficien");
  rope_t R4 = rope_new("t");
  rope_t R12 = rope_join(R1, R2);
  rope_t R34 = rope_join(R3, R4);
  rope_t R = rope_join(R12, R34);
  
  rope_t R_sub = rope_sub(R, 1, 16);
  assert(R->left->right==R_sub->left);
  assert(R->right==R_sub->right);

  // reduce test 1
  rope_t[] A = alloc_array(rope_t, 3);
  rope_t r1 = rope_new("a");
  rope_t r2 = rope_new("br");
  A[0] = rope_join(r1, r2);
  rope_t r3 = rope_new("abr");
  rope_t r4 = rope_new("a");
  A[1] = rope_join(r3, r4);
  rope_t r5 = rope_new("a");
  rope_t r6 = rope_new("br");
  rope_t r7 = rope_new("a");
  A[2] = rope_join(r5, rope_join(r6, r7));

  rope_reduce(A, 3);
  assert(A[1]->left == A[0]);
  assert(A[2] == A[1]);
  // rope_print(A[0]->left);
  // println("\n");
  // rope_print(A[0]->right);
  // println("\n");

  // reduce test 2
  rope_t[] B = alloc_array(rope_t, 4);
  rope_t rr1 = rope_new("a");
  rope_t rr2 = rope_new("a");
  B[0] = rope_join(rr1, rr2);
  B[1] = rope_new("aa");
  B[2] = rope_join(rope_new("aa"), rope_new("b"));
  B[3] = NULL;
  
  rope_reduce(B, 4);
  assert(B[0]->right == B[0]->left);
  assert(B[1] == B[0]);
  assert(B[2]->left == B[0]);
  assert(B[3] == NULL);

  printf("All tests passed!\n");
  return 0;
}